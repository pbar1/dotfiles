#!/usr/bin/env python3

import argparse
import secrets
import sys


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


# Test it here: https://www.uic.edu/apps/strong-password/
def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate easy-to-type passwords",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--left",
        default="arstd",
        help="characters typed by left hand",
    )
    parser.add_argument(
        "--right",
        default="hneio",
        help="characters typed by right hand",
    )
    parser.add_argument("--sep", default="39- ", help="characters used as separators")
    parser.add_argument(
        "--wordlist",
        default="/usr/share/dict/words",
        help="file with valid words as lines",
    )
    parser.add_argument(
        "--num-words",
        default=3,
        type=int,
        help="number of words in the result",
    )
    parser.add_argument(
        "--max-word-len",
        default=8,
        type=int,
        help="max length a constituent word can be",
    )
    parser.add_argument(
        "--min-word-len",
        default=4,
        type=int,
        help="min length a constituent word can be",
    )
    return parser.parse_args()


def valid_word(charset: str, word: str) -> bool:
    return all(char in charset for char in word)


def get_wordlist(
    wordlist: str, charset: str, max_word_len: int, min_word_len: int
) -> list[str]:
    return [
        word.strip()
        for word in open(wordlist).readlines()
        if valid_word(charset=charset, word=word.strip())
        and len(word.strip()) <= max_word_len
        and len(word.strip()) >= min_word_len
    ]


def main():
    args = get_args()

    combined = args.left + args.right
    wordlist_combined = get_wordlist(
        wordlist=args.wordlist,
        charset=combined,
        max_word_len=args.max_word_len,
        min_word_len=args.min_word_len,
    )
    wordlist_left = get_wordlist(
        wordlist=args.wordlist,
        charset=args.left,
        max_word_len=args.max_word_len,
        min_word_len=args.min_word_len,
    )
    wordlist_right = get_wordlist(
        wordlist=args.wordlist,
        charset=args.right,
        max_word_len=args.max_word_len,
        min_word_len=args.min_word_len,
    )

    upcase_idx = secrets.choice(range(args.num_words))
    upcase_hand = secrets.choice([0, 1])
    wordlist_upcase = wordlist_left if upcase_hand == 0 else wordlist_right

    out = ""
    for i in range(args.num_words):
        if i == upcase_idx:
            out += secrets.choice(wordlist_upcase).upper()
        else:
            out += secrets.choice(wordlist_combined).lower()
        if i != args.num_words - 1:
            out += secrets.choice(args.sep)
    print(out)
    eprint(f"length: {len(out)}")


if __name__ == "__main__":
    main()
