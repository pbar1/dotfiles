#!/usr/bin/env python3

import argparse
import subprocess


def main():
    parser = argparse.ArgumentParser(
        "json-diff",
        description="""
Uses DuckDB to perform an ANTI JOIN on two JSON files. Input is expected to be
two JSON files where the root element is an array of objects. The output will
be an array of objects whose properties are all of the properties of the
"after" input file.

Automatically detects compression of files with extensions like ".json.gz" and
anything else DuckDB supports.
""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("before", help="JSON file with original content")
    parser.add_argument("after", help="JSON file with updated content")
    parser.add_argument("--join-key", default="id", help="Key to join on")
    parser.add_argument(
        "--output", default="join.json", help="JSON file to output results"
    )
    parser.add_argument(
        "--reverse", action="store_true", help="Reverse before and after"
    )
    parser.add_argument(
        "--no-array", action="store_true", help="Output NDJSON instead of a JSON array"
    )
    args = parser.parse_args()

    if args.reverse:
        before = args.after
        after = args.before
    else:
        before = args.before
        after = args.after

    array = "FALSE" if args.no_array else "TRUE"

    subprocess.run(
        [
            "duckdb",
            "-c",
            f"""
CREATE TABLE before AS SELECT * FROM '{before}';
CREATE TABLE after AS SELECT * FROM '{after}';
COPY (
  SELECT after.*
  FROM after
  ANTI JOIN before
  ON after.{args.join_key} = before.{args.join_key}
) TO '{args.output}' (ARRAY {array})
""",
        ],
        check=True,
    )


if __name__ == "__main__":
    main()
