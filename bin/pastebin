#!/usr/bin/env python3

import argparse
import os
import sys
from urllib.parse import urlencode
from urllib.request import Request, urlopen


def send(dev_key: str, text: str) -> str:
    url = "https://pastebin.com/api/api_post.php"
    data = {
        "api_dev_key": dev_key,
        "api_option": "paste",
        "api_paste_code": text,
    }
    postdata = urlencode(data).encode()
    req = Request(url, data=postdata, method="POST")
    with urlopen(req) as response:
        return response.read().decode()


# TODO: This only works in public pastes and is hacky
def recv(dev_key: str, paste_id: str) -> str:
    if "pastebin.com/raw/" not in paste_id:
        paste_id = paste_id.replace("pastebin.com/", "pastebin.com/raw/")
    with urlopen(paste_id) as response:
        return response.read().decode()


def main() -> None:
    parser = argparse.ArgumentParser(
        description="""Pipe to/from Pastebin.

If stdin exists, its contents will be used to create a paste whose URL will be
returned and printed on stdout.

Else if the first argument is a paste URL, its contents will be fetched and
printed to stdout.""",
    formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "paste",
        metavar="PASTE_URL",
        nargs="?",
        help="pastebin.com URL of the paste to receive",
    )
    args = parser.parse_args()

    dev_key = os.getenv("PASTEBIN_DEV_KEY")

    if not sys.stdin.isatty():
        text = "".join(sys.stdin.readlines())
        paste_id = send(dev_key, text)
        print(paste_id)
    elif args.paste is not None:
        paste_id = args.paste
        text = recv(dev_key, paste_id)
        print(text)
    else:
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()

